--- origsrc/nasm-2.08.02/doc/nasmdoc.src	2010-07-10 06:44:10.000000000 +0800
+++ src/nasm-2.08.02/doc/nasmdoc.src	2010-07-12 00:19:47.765625000 +0800
@@ -5011,7 +5011,9 @@ opinion over the precise semantics of PC
 produce COFF files suitable for DJGPP, use NASM's \c{coff} output
 format; conversely, the \c{coff} format does not produce object
 files that Win32 linkers can generate correct output from.
-
+For similar reasons, the \c{gnuwin32} COFF format used to be necessary 
+on Cygwin to link; it is now only present to be backward-compatible with
+scripts that rely on this format.
 
 \S{win32sect} \c{win32} Extensions to the \c{SECTION}
 Directive\I{SECTION, win32 extensions to}
@@ -5157,6 +5159,11 @@ data for "safe exception handler table"
 incompatibilities and "safeseh" modules generated by NASM 2.03 and
 later can still be linked by earlier versions or non-Microsoft linkers.
 
+\H{gnuwin32fmt} \i\c{gnuwin32}: \i{Cygwin Common Object File Format}
+
+This used to generate a different VirtualSize header for BSS sections,
+but nowadays it is identical to the \c{win32} object format (\k{win32fmt})
+with the exception that it uses the \c{.o} filename extension by default.
 
 \H{win64fmt} \i\c{win64}: Microsoft Win64 Object Files
 
--- origsrc/nasm-2.08.02/output/outcoff.c	2010-07-10 06:44:10.000000000 +0800
+++ src/nasm-2.08.02/output/outcoff.c	2010-07-12 00:19:47.828125000 +0800
@@ -1040,6 +1040,24 @@ struct ofmt of_win32 = {
     coff_cleanup
 };
 
+struct ofmt of_gnuwin32 = {
+    "GNU MinGW32/Cygwin Win32 (win32 legacy alias)",
+    "gnuwin32",
+    0,
+    null_debug_arr,
+    &null_debug_form,
+    coff_stdmac,
+    coff_win32_init,
+    coff_set_info,
+    coff_out,
+    coff_deflabel,
+    coff_section_names,
+    coff_segbase,
+    coff_directives,
+    coff_std_filename,
+    coff_cleanup
+};
+
 #endif
 
 #ifdef OF_WIN64
--- origsrc/nasm-2.08.02/output/outform.h	2010-07-10 06:44:10.000000000 +0800
+++ src/nasm-2.08.02/output/outform.h	2010-07-12 00:19:47.843750000 +0800
@@ -265,6 +265,7 @@ extern struct ofmt of_elf64;
 extern struct ofmt of_as86;
 extern struct ofmt of_obj;
 extern struct ofmt of_win32;
+extern struct ofmt of_gnuwin32;
 extern struct ofmt of_win64;
 extern struct ofmt of_rdf2;
 extern struct ofmt of_ieee;
@@ -308,6 +309,7 @@ static struct ofmt *drivers[] = {
 #endif
 #ifdef OF_WIN32
     &of_win32,
+    &of_gnuwin32,
 #endif
 #ifdef OF_WIN64
     &of_win64,
